@model OnlineMovieTicket.BL.DTOs.Movie.MovieDTO
@using Microsoft.AspNetCore.Identity
@using OnlineMovieTicket.DAL.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Detail";
    var isLoggedIn = SignInManager.IsSignedIn(User);
    ApplicationUser? user = null;
    bool isAdmin = false;
    if (isLoggedIn)
    {
        user = await UserManager.GetUserAsync(User);
        isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
    }
}

<section class="hero-banner">
    <img src="@Model.BannerURL" alt="Movie Banner">
</section>
<div class="container py-5">
    <!-- Movie Details Section -->
    <section class="mb-5">
        <div class="row">
            <div class="col-lg-3 mb-4 mb-lg-0">
                <img src="@Model.PosterURL" alt="Movie Poster" class="movie-poster img-fluid w-100">
            </div>
            <div class="col-lg-9">
                <div class="movie-info-card p-4">
                    <h2 class="mb-4">@Model.Title</h2>
                    <div class="movie-meta">
                        <div class="movie-meta-item">
                            <i class="bi bi-calendar3"></i>
                            <span>Release Date: @Model.ReleaseDate.ToString("dd MMM yyyy")</span>
                        </div>
                        <div class="movie-meta-item">
                            <i class="bi bi-clock"></i>
                            <span>Duration: @Model.Duration minutes</span>
                        </div>
                        <div class="movie-meta-item">
                            <i class="bi bi-person"></i>
                            <span>Director: @Model.Actor</span>
                        </div>
                        <div class="movie-meta-item">
                            <i class="bi bi-currency-dollar"></i>
                            <span>Price: @Model.Price</span>
                        </div>
                    </div>
                    
                    <h5 class="mb-3">Description</h5>
                    <p class="mb-4">
                        @Model.Description
                    </p>
                    
                    <div class="d-flex flex-wrap gap-2 mb-4">
                        <a href="javascript:void(0)" onclick="showTrailer('@Model.TrailerURL')" class="btn btn-trailer">
                            <i class="bi bi-play-circle me-2"></i>Watch Trailer
                        </a>
                        @if(!isAdmin)
                        {
                            <a href="javascript:void(0)" id="bookNowBtn" class="btn btn-booking text-white">
                                <i class="bi bi-ticket-perforated me-2"></i>Book Tickets
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
    @if (isLoggedIn && !isAdmin){
        <section id="booking-area" class="booking-area">
            <div class="booking-header">
                <h3><i class="bi bi-ticket-perforated me-2"></i>Book Your Tickets</h3>
            </div>
            <div class="booking-content">
                <div class="booking-step">
                    <div class="step-title">
                        <div class="step-number">1</div>
                        <h4>Select Location</h4>
                    </div>
                    <div class="filter-section">
                        <div class="row">
                            <div class="col-md-4 mb-3 mb-md-0">
                                <label for="countryFilter" class="form-label filter-title">Country</label>
                                <select class="form-select" id="countryFilter">
                                    <option value="">All Countries</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3 mb-md-0">
                                <label for="cityFilter" class="form-label filter-title">City</label>
                                <select class="form-select" id="cityFilter" disabled>
                                    <option value="">All Cities</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3 mb-md-0">
                                <label for="cinemaFilter" class="form-label filter-title">Cinema</label>
                                <select class="form-select" id="cinemaFilter" disabled>
                                    <option value="">All Cinemas</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <h5 class="mb-3 mt-4">Select Date</h5>
                    <div class="date-selector" id="dateSelector"></div>
                    <h5 class="mb-3 mt-4 ">Available Showtimes</h5>
                    <div class="cinema-selector d-none" id="showtimesSelector"></div>
                </div>

                <div class="booking-step d-none" id="bookingSeat">
                    <div class="step-title">
                        <div class="step-number">2</div>
                        <h4>Select Seats</h4>
                    </div>
                    <div class="seat-selection" id="seatSelected"></div>
                </div>

                <div class="booking-step d-none" id="bookingSummary">
                    <div class="step-title">
                        <div class="step-number">4</div>
                        <h4>Booking Summary</h4>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 mb-4">
                            <div class="booking-summary">
                                <h5 class="mb-3">Order Details</h5>
                                <div class="summary-item">
                                    <span>Movie:</span>
                                    <span>@Model.Title</span>
                                </div>
                                <div class="summary-item">
                                    <span>Date & Time:</span>
                                    <span id="startTime"></span>
                                </div>
                                <div class="summary-item">
                                    <span>Cinema:</span>
                                    <span id="cinemaName"></span>
                                </div>
                                <div class="summary-item">
                                    <span>Room:</span>
                                    <span id="roomName"></span>
                                </div>
                                <div class="d-flex justify-content-space-between">
                                    <div class="col-md-6">
                                        <span>Seats:</span>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        <span id="selectedSeats"></span>
                                    </div>
                                </div>
                                <div class="summary-total">
                                    <span>Total:</span>
                                    <span id="ticketTotalPrice"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="payment-form">
                                <div class="payment-header">
                                    <h5 class="payment-title">Secure Payment</h5>
                                </div>                            
                                <div class="mb-3">
                                    <label for="cardNumber" class="form-label">Card Number</label>
                                    <div id="card-element">

                                    </div>
                                    <div id="card-errors" role="alert"></div>
                                </div>                                
                                <div class="mb-3">
                                    <label for="cardName" class="form-label">Cardholder Name</label>
                                    <input type="text" class="form-control" id="cardName" placeholder="John Doe">
                                </div>    
                                <button class="btn checkout-btn" id="pay-button">
                                    <i class="bi bi-credit-card me-2"></i>Proceed to Payment
                                </button>
                            </div>
                        </div>
                    </div>
                </div>    
            </div>
        </section>
    }
</div>


<!-- Modal xem trailer -->
<div class="modal fade trailer-modal" id="trailerModal" tabindex="-1" aria-labelledby="trailerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="trailerModalLabel">Trailer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="stopTrailer()"></button>
            </div>
            <div class="modal-body">
                <div class="ratio ratio-16x9">
                    <iframe id="trailerIframe" src="" title="Movie Trailer" allowfullscreen></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        const urlCreatePaymentIntents = '@Url.Action("CreatePaymentIntent", "Payment")';
        const urlCompletePayment = '@Url.Action("CompletePayment", "Payment")';
        const urlGetAllCountries = '@Url.Action("GetAllCountries", "Movie")';
        const urlGetCities = '@Url.Action("GetCitiesByCountry", "Movie")';
        const urlGetCinemas = '@Url.Action("GetCinemasByCity", "Movie")';
        const urlGetShowtimes = '@Url.Action("GetShowtimes", "Movie")';
        const urlGetShowtimeSeats = '@Url.Action("GetShowtimeSeats", "Movie")';
        const isLoggedIn = @isLoggedIn.ToString().ToLower();
        const isAdmin = @isAdmin.ToString().ToLower();
        const movieId = @Model.Id;
        const price = @Model.Price;

        const dateSelector = document.getElementById("dateSelector");
        const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        const stripe = Stripe("pk_test_51QQyW6FAmwkm9Vtt5SE30P2PkBKuuw2yCea5855g7GnKvffPKPWN1rVRLHl4L5x4kHuUfOgwLrj2tZrWwEVcbNba004q0fitU0");
        let room = null;
        let cinema = null;
        let startTime = null;
        let showtimeId = null;
        let dateSelected = null;
        let selectedSeats = [];

        $(document).ready(function () {
            $('#bookNowBtn').click(function(e) {
                if (!isLoggedIn) {
                    const returnUrl = window.location.pathname + window.location.search;
                    window.location.href = `/Identity/Account/Login?returnUrl=${encodeURIComponent(returnUrl)}`;
                }else {
                    $('html, body').animate({
                        scrollTop: $('#booking-area').offset().top
                    }, 600);
                }

            });


            if (isLoggedIn && !isAdmin) {
                const elements = stripe.elements();
                const cardElement = elements.create("card");
                cardElement.mount("#card-element");
                loadCountries($('#countryFilter'));
                renderDateList();

                $('#countryFilter').on('change', function () {
                    const countryId = $(this).val();
                    $('#cityFilter').val("");
                    $('#cinemaFilter').val("");
                    selectedSeats= [];
                    $('#bookingSeat').addClass('d-none');
                    $('#seatSelected').empty();
                    $('#bookingSummary').addClass('d-none');
                    $('#showtimesSelector').empty();
                    loadCities($('#cityFilter'), countryId);
                    loadCinemas($('#cinemaFilter'));
                    checkShowtimeVisibility();
                });

                $('#cityFilter').on('change', function () {
                    const cityId = $(this).val();
                    $('#cinemaFilter').val("");
                    selectedSeats= [];
                    $('#bookingSeat').addClass('d-none');
                    $('#seatSelected').empty();
                    $('#bookingSummary').addClass('d-none');
                    $('#showtimesSelector').empty();
                    loadCinemas($('#cinemaFilter'), cityId);
                    checkShowtimeVisibility()
                });

                $('#cinemaFilter').on('change', function () {
                    selectedSeats= [];
                    $('#bookingSeat').addClass('d-none');
                    $('#seatSelected').empty();
                    $('#bookingSummary').addClass('d-none');
                    $('#showtimesSelector').empty();
                    checkShowtimeVisibility()
                });
            
                $(document).on("click", ".time-item", function () {
                    $('.time-item').removeClass('active');
                    $(this).addClass('active');
                    showtimeId = $(this).data('showtime-id');
                    cinema = $(this).data('cinema');
                    room = $(this).data('room');
                    startTime = $(this).data('starttime');
                    $('#bookingSummary').addClass('d-none');
                    loadSeatsForShowtime(showtimeId);
                });

                $(document).on("click", ".seat", function () {
                    if ($(this).is('[disabled]')) {
                        return;
                    }
                    const seatInfo = $(this).data('seat-info');
                    const seatId = seatInfo.id;
                    const index = selectedSeats.findIndex(s => s.id === seatId);
                    if (index !== -1) {
                    selectedSeats.splice(index, 1);
                    $(this).css({
                        'border': '1px solid #6c757d'
                    });
                    } else {
                        selectedSeats.push(seatInfo);
                        $(this).css({
                            'border': '5px solid red'
                        });
                    }
                    updateBookingSummary();
                    updateSelectedSeats();
                    updateTotal();
                    if (selectedSeats.length > 0) {
                        $('#bookingSummary').removeClass('d-none');
                    } else {
                        $('#bookingSummary').addClass('d-none');
                    }
                });
            
                $("#pay-button").click(async function (event) {
                    event.preventDefault();
                    
                    const cardholderName = $("#cardName").val();
                    const totalPrice = parseFloat($("#ticketTotalPrice").text());

                    const { paymentMethod, error: paymentMethodError } = await stripe.createPaymentMethod({
                        type: 'card',
                        card: cardElement,
                        billing_details: {
                            name: cardholderName
                        }
                    });
                    console.log("payment_method", paymentMethod);

                    if (paymentMethodError) {
                        $("#card-errors").text(paymentMethodError.message);
                        return;
                    }

                    $.ajax({
                        url: urlCreatePaymentIntents,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({
                            amount: totalPrice
                        }),
                        success: async function (data) {
                            if (data.success) {
                                const clientSecret = data.clientSecret;
                                const { paymentIntent, error: confirmError } = await stripe.confirmCardPayment(clientSecret, {
                                    payment_method: paymentMethod.id
                                });
                                if (confirmError) {
                                    $("#card-errors").text(confirmError.message);
                                } else if (paymentIntent.status === 'succeeded') {
                                    $.ajax({
                                        url: urlCompletePayment,
                                        type: "POST",
                                        contentType: "application/json",
                                        data: JSON.stringify({
                                            paymentIntentId: paymentIntent.id,
                                            ShowtimeSeatDTOs: selectedSeats,
                                            price: totalPrice
                                        }),
                                        success: function (result) {
                                            if (result.success) {
                                                toastr.success("Thanh toán thành công! Vé đã được tạo!");
                                                setTimeout(function () {
                                                    window.location.reload();
                                                }, 2000);
                                            } else {
                                                toastr.error("Có lỗi xảy ra khi tạo vé.");
                                            }
                                        },
                                        error: function (xhr) {
                                            toastr.error("Lỗi server khi hoàn tất thanh toán.");
                                        }
                                    });
                                }
                            } else {
                                toastr.error(data.error || "Không thể tạo payment intent.");
                            }
                        },
                        error: function (xhr) {
                            toastr.error("Lỗi server khi tạo payment intent.");
                        }
                    });
                });
            }          
        });
        const dateItems = document.querySelectorAll('.date-item');
        dateItems.forEach(item => {
            item.addEventListener('click', function() {
                dateItems.forEach(date => date.classList.remove('active'));
                this.classList.add('active');
                $('#bookingSeat').addClass('d-none');
                $('#seatSelected').empty();
                $('#bookingSummary').addClass('d-none');
            });
        });
        const cinemaItems = document.querySelectorAll('.cinema-item');
        cinemaItems.forEach(item => {
            item.addEventListener('click', function() {
                cinemaItems.forEach(cinema => cinema.classList.remove('active'));
                this.classList.add('active');
            });
        });

        function showTrailer(youtubeUrl) {
            const embedUrl = youtubeUrl.replace("watch?v=", "embed/");
            $('#trailerIframe').attr('src', embedUrl + '?autoplay=1');
            
            var trailerModal = new bootstrap.Modal(document.getElementById('trailerModal'));
            trailerModal.show();
        }

        function stopTrailer() {
            $('#trailerIframe').attr('src', '');
        }

        function loadCountries(selectElement) {
            $.ajax({
                url: urlGetAllCountries,
                type: 'GET',
                success: function (data) {
                    selectElement.val("");
                    selectElement.find('option').not('[value=""]').remove();
                    $.each(data, function (i, country) {
                        selectElement.append($('<option>', {
                            value: country.id,
                            text: country.name,
                        }));
                    });
                },
                error: function () {
                    toastr.error("Failed to load countries.");
                }
            });
        }
        
        function loadCities(selectElement, countryId = null) {
            $.ajax({
                url: urlGetCities,
                type: 'GET',
                data: {countryId: countryId},
                success: function (data) {
                    selectElement.val("");
                    selectElement.find('option').not('[value=""]').remove();
                    if(!countryId){
                        selectElement.prop('disabled', true);
                    }else{
                        selectElement.prop('disabled', false);
                    }
                    $.each(data, function (i, city) {
                        selectElement.append($('<option>', {
                            value: city.id,
                            text: city.name,
                        }));
                    });
                },
                error: function () {
                    toastr.error("Failed to load Cities.");
                }
            });
        }
        
        function loadCinemas(selectElement, cityId = null) {
            $.ajax({
                url: urlGetCinemas,
                type: 'GET',
                data: {cityId: cityId},
                success: function (data) {
                    selectElement.val("");
                    selectElement.find('option').not('[value=""]').remove();
                    if(!cityId){
                        selectElement.prop('disabled', true);
                        return;
                    }else{
                        selectElement.prop('disabled', false);
                    }
                    $.each(data, function (i, cinema) {
                        selectElement.append($('<option>', {
                            value: cinema.id,
                            text: cinema.name,
                        }));
                    });
                },
                error: function () {
                    toastr.error("Failed to load Cinema.");
                }
            });
        }

        function renderDateList(startDate = new Date(), numberOfDays = 10) {
            const dateSelector = document.getElementById("dateSelector");
            dateSelector.innerHTML = "";

            const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            for (let i = 0; i <= numberOfDays; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);

                const day = date.getDate();
                const month = months[date.getMonth()];
                const weekday = weekdays[date.getDay()];

                const dateItem = `
                    <div class="date-item" data-date="${date.toISOString().split('T')[0]}">
                        <span class="date-day">${day}</span>
                        <span class="date-month">${month}</span>
                        <span class="date-weekday">${weekday}</span>
                    </div>
                `;
                dateSelector.innerHTML += dateItem;
            }
            document.querySelectorAll('.date-item').forEach(item => {
                item.addEventListener('click', function () {
                    document.querySelectorAll('.date-item').forEach(d => d.classList.remove('active'));
                    this.classList.add('active');
                    dateSelected = this.getAttribute('data-date');
                    selectedSeats= []
                    $('#bookingSeat').addClass('d-none');
                    $('#seatSelected').empty();
                    $('#bookingSummary').addClass('d-none');
                    checkShowtimeVisibility();
                });
            });
        }

        function checkShowtimeVisibility (){
            const cinemaSelected = $('#cinemaFilter').val();
            if(cinemaSelected && dateSelected){
                loadshowtimes()
                showtimesSelector.classList.remove('d-none');
            } else {
                showtimesSelector.classList.add('d-none');
            }
        }

        
        function loadshowtimes() {
            const cinemaId= $('#cinemaFilter').val();
            $.ajax({
                url: urlGetShowtimes,
                type: 'GET',
                data: {cinemaId: cinemaId, movieId: movieId, selectedDate: dateSelected},
                success: function (response) {
                    $('#showtimesSelector').html(response);
                },
                error: function (xhr, status, error) {
                    toastr.error('There was an error processing your request: ' + error);
                }
            });
        }
    
        function loadSeatsForShowtime(showtimeId){
            $.ajax({
                url: urlGetShowtimeSeats,
                type: 'GET',
                data: {showtimeId: showtimeId},
                success: function (response) {
                    $("#bookingSeat").removeClass("d-none");
                    $('#seatSelected').html(response);
                },
                error: function (xhr, status, error) {
                    toastr.error('There was an error processing your request: ' + error);
                }
            });
        }

        function updateBookingSummary() {
            let cinemaSpan = document.getElementById("cinemaName");
            let roomSpan = document.getElementById("roomName");
            let startTimeSpan = document.getElementById("startTime");

            cinemaSpan.textContent = cinema;
            roomSpan.textContent = room;
            formattedTime = new Date(startTime).toLocaleString('en-US', {
                                        weekday: 'long',
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit',
                                        hour12: false
            });
            startTimeSpan.textContent = formattedTime.replace(" at", " -");
        }

        function updateSelectedSeats() {
            let selectedSeatsSpan = document.getElementById("selectedSeats");

            const seatNames = selectedSeats.map(seat => {
                const rowLetter = String.fromCharCode('A'.charCodeAt(0) + seat.rowIndex);
                return rowLetter + seat.columnIndex;
            });

            selectedSeatsSpan.textContent = seatNames.join(', ');
        }

        function updateTotal() {
            let total = 0;
            let ticketTotalPriceSpan = document.getElementById("ticketTotalPrice");
            selectedSeats.forEach(seat => {
                total += (price * seat.priceMultiplier);
            });

            ticketTotalPriceSpan.textContent = total.toFixed(2);
        }
    </script>
}