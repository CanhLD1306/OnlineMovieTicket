@{
    ViewData["Title"] = "Profile";
}

<section class="page-header">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 text-center">
                <h1 class="display-4 fw-bold mb-4">My Profile</h1>
                <p class="lead">Manage your account information and view your tickets</p>
            </div>
        </div>
    </div>
</section>

<div class="container">
    <div class="profile-container">
        <ul class="nav nav-tabs profile-tabs" id="profileTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="true">
                    <i class="bi bi-person me-2"></i>Profile
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="password-tab" data-bs-toggle="tab" data-bs-target="#password" type="button" role="tab" aria-controls="password" aria-selected="false">
                    <i class="bi bi-key me-2"></i>Change Password
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="tickets-tab" data-bs-toggle="tab" data-bs-target="#tickets" type="button" role="tab" aria-controls="tickets" aria-selected="false">
                    <i class="bi bi-ticket-perforated me-2"></i>My Tickets
                </button>
            </li>
        </ul>

        <div class="tab-content" id="profileTabsContent">
            <div class="tab-pane fade show active" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                <div class="profile-content" id="profileInformation">
                    
                </div>
            </div>
            <div class="tab-pane fade" id="password" role="tabpanel" aria-labelledby="password-tab">
                <div class="profile-content" id="changePassword">
                    
                </div>
            </div>
            <!-- Tickets Tab -->
            <div class="tab-pane fade" id="tickets" role="tabpanel" aria-labelledby="tickets-tab">
                <div class="profile-content">
                    <div class="ticket-filter">
                        <div class="btn-group" role="group" aria-label="Ticket filter">
                            <input type="radio" class="btn-check" name="ticketFilter" id="allTickets" value="" checked>
                            <label class="btn btn-outline-primary" for="allTickets">All Tickets</label>
                            
                            <input type="radio" class="btn-check" name="ticketFilter" id="upcomingTickets" value="true">
                            <label class="btn btn-outline-primary" for="upcomingTickets">Upcoming</label>
                            
                            <input type="radio" class="btn-check" name="ticketFilter" id="pastTickets" value="false">
                            <label class="btn btn-outline-primary" for="pastTickets">Past</label>
                        </div>
                    </div>
                    <div id="ticketList">

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const urlGetProfile= '@Url.Action("GetProfile", "User")';
        const urlUploadProfile= '@Url.Action("UploadProfile", "User")';
        const urlChangePassword = '@Url.Action("ChangePassword", "User")';
        const urlGetTickets = '@Url.Action("GetTickets", "User")';
        let filterValue = "";

        $(document).ready(function () {
            loadProfile();
            $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                const targetId = $(e.target).data('bsTarget');
                localStorage.setItem('selectedTab', targetId);
                if (targetId === '#profile') {
                    loadProfile();
                } else if (targetId === '#password') {
                    loadChangePassword();
                } else if (targetId === '#tickets') {
                    filterValue = "";
                    $('input[name="ticketFilter"]').prop('checked', false);
                    $('#allTickets').prop('checked', true);
                    loadTickets(5, filterValue)
                }
            });

            $('input[name="ticketFilter"]').change(function () {
                filterValue = $(this).val();
                loadTickets(5, filterValue);
            });

            $(document).on('submit', '#profileForm', function (e) {
                e.preventDefault();
                if (!$(this).valid()) {
                    return;
                }
                var token = $('input[name="__RequestVerificationToken"]').val();
                var form = $('#profileForm')[0];
                var formData = new FormData(form);
                $.ajax({
                    url: urlUploadProfile,
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    data: formData,
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(function () {
                                location.reload();
                            }, 2000);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error('There was an error processing your request: ' + error);
                    }
                });
            });

            $(document).on('submit', '#changePasswordForm', function (e) {
                e.preventDefault();
                if (!$(this).valid()) {
                    return;
                }
                var token = $('input[name="__RequestVerificationToken"]').val();
                var formData = $(this).serialize();
                $.ajax({
                    url: urlChangePassword,
                    type: 'POST',
                    data: formData,
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            loadChangePassword();
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error('There was an error processing your request: ' + error);
                    }
                });
            });


        
        });
        function loadProfile (){
            $.ajax({
                url: urlGetProfile,
                type: 'GET',
                success: function (response) {
                    $('#profileInformation').html(response);
                    $.validator.unobtrusive.parse('#profileForm');
                },
                error: function (xhr, status, error) {
                    toastr.error('There was an error processing your request: ' + error);
                }
            });
        }

        function loadChangePassword(){
            $.ajax({
                url: urlChangePassword,
                type: 'GET',
                success: function (response) {
                    $('#changePassword').html(response);
                    $.validator.unobtrusive.parse('#changePasswordForm');
                    const inputPassword = document.getElementById("inputPassword");
                    const reqLength = document.getElementById("req-length");
                    const reqUppercase = document.getElementById("req-uppercase");
                    const reqLowercase = document.getElementById("req-lowercase");
                    const reqNumber = document.getElementById("req-number");
                    const reqSpecial = document.getElementById("req-special");

                    if (inputPassword) {
                        inputPassword.addEventListener("input", function () {
                            const password = inputPassword.value;
                            reqLength.classList.toggle("text-success", password.length >= 6);
                            reqUppercase.classList.toggle("text-success", /[A-Z]/.test(password));
                            reqLowercase.classList.toggle("text-success", /[a-z]/.test(password));
                            reqNumber.classList.toggle("text-success", /\d/.test(password));
                            reqSpecial.classList.toggle("text-success", /[^A-Za-z0-9]/.test(password));
                        });
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error('There was an error processing your request: ' + error);
                }
            });
        }

        function previewImage(event, previewId, messageSpanId) {
            const preview = document.getElementById(previewId);
            const messageSpan = document.getElementById(messageSpanId);
            const file = event.target.files[0];

            messageSpan.textContent = "";
            messageSpan.style.display = "none";

            if (file) {
                const validImageTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"];

                if (!validImageTypes.includes(file.type)) {
                    messageSpan.textContent = "Only image files (JPG, PNG, GIF, WEBP) are allowed";
                    messageSpan.style.display = "block";
                    event.target.value = "";
                    preview.src = "#";
                    preview.style.display = "none";
                    return;
                }

                const reader = new FileReader();
                reader.onload = function (e) {
                    preview.src = e.target.result;
                    preview.style.display = "block";
                };
                reader.readAsDataURL(file);
            } else {
                preview.src = "#";
                preview.style.display = "none";
            }
        }

        function loadTickets(maxRecord, isUpcoming) {
            $.ajax({
                url: urlGetTickets,
                type: 'GET',
                data: {maxRecord: maxRecord, isUpcoming: isUpcoming},
                success: function (response) {
                    $('#ticketList').html(response);
                },
                error: function (xhr, status, error) {
                    toastr.error('There was an error processing your request: ' + error);
                }
            });
        }

        function loadMoreTickets() {
            var totalCount = parseInt(document.getElementById('totalCount').value);
            var currentCount = parseInt(document.getElementById('currentCount').value);
            if(currentCount < totalCount){
                loadTickets(currentCount + 5,filterValue)
            }
        }
    </script>
}
